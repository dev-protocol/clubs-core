---
import { ClubsPropsAdminPages, ClubsSlotName, decode } from '../index'
import AdminSidebar from './AdminSidebar.astro'
import AdminConfigurationManager from './AdminConfigurationManager.astro'
import AdminThemeCard from './AdminThemeCard.astro'
import Aside from './Aside.astro'
import Clubs from './primitives/Clubs.astro'
import XMark from './icons/x-mark.astro'
import Bars3BottomLeft from './icons/bars-3-bottom-left.astro'
import Modal from './Modal.astro'

import '../styles'

const { page } = Astro.params
const { clubs } = Astro.props as ClubsPropsAdminPages

const config = decode(clubs.encodedClubsConfiguration)
const { name } = config

const enabledPlugins = clubs.plugins
	.filter((plugin) => plugin.enable === true)
	.filter((plugin) => plugin.name.toUpperCase() !== 'ADMIN')
const currentTheme = clubs.plugins
	.filter((plugin) => plugin.enable === true)
	.find((plugin) => plugin.meta.category === 'theme')

const theme = page && page.startsWith('theme')

const SlotsSidebarBeforeTitle = clubs.slots.filter(
	(slot) => slot.slot === ClubsSlotName.AdminSidebarBeforeTitle
)
const SlotsSidebarBeforeOverviewLink = clubs.slots.filter(
	(slot) => slot.slot === ClubsSlotName.AdminSidebarBeforeOverviewLink
)
const SlotsSidebarBeforeThemeLink = clubs.slots.filter(
	(slot) => slot.slot === ClubsSlotName.AdminSidebarBeforeThemeLink
)
const SlotsSidebarAfterBuiltInPrimaryLinks = clubs.slots.filter(
	(slot) => slot.slot === ClubsSlotName.AdminSidebarAfterBuiltInPrimaryLinks
)
const SlotsAsideAfterBuiltInButtons = clubs.slots.filter(
	(slot) => slot.slot === ClubsSlotName.AdminAsideAfterBuiltInButtons
)
---

<!DOCTYPE html>
<html class="dark" lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="preconnect" href="https://fonts.googleapis.com" /><link
			rel="preconnect"
			href="https://fonts.gstatic.com"
			crossorigin
		/><link
			href="https://fonts.googleapis.com/css2?family=DM+Sans:wght@400;700&family=Poppins:wght@700&family=Syne:wght@700&display=swap"
			rel="stylesheet"
		/>
		<title>{name} | Admin</title>
	</head>

	<body class="font-body bg-dp-blue-grey-300 min-h-screen text-white">
		<div
			class="grid gap-20 lg:mr-20 lg:auto-cols-[18rem_minmax(auto,_1fr)_12rem] lg:grid-flow-col"
		>
			<header
				id="__clubs:header__"
				class="bg-dp-blue-grey-400 fixed z-50 grid hidden max-h-screen min-h-screen w-full content-start gap-16 overflow-y-scroll py-16 px-8 lg:relative lg:grid lg:max-h-fit lg:overflow-y-auto"
			>
				<AdminSidebar page={page} name={name} enabledPlugins={enabledPlugins}>
					<slot name="admin:sidebar:before-title" slot="before-title" />
					<slot
						name="admin:sidebar:before-overview-link"
						slot="before-overview-link"
					/>
					<slot
						name="admin:sidebar:before-theme-link"
						slot="before-theme-link"
					/>
					<slot
						name="admin:sidebar:after-built-in-primary-links"
						slot="after-built-in-primary-links"
					/>
					{
						SlotsSidebarBeforeTitle.map((Slot) => (
							<Slot.component {...Slot.props} slot="before-title" />
						))
					}
					{
						SlotsSidebarBeforeOverviewLink.map((Slot) => (
							<Slot.component {...Slot.props} slot="before-overview-link" />
						))
					}
					{
						SlotsSidebarBeforeThemeLink.map((Slot) => (
							<Slot.component {...Slot.props} slot="before-theme-link" />
						))
					}
					{
						SlotsSidebarAfterBuiltInPrimaryLinks.map((Slot) => (
							<Slot.component
								{...Slot.props}
								slot="after-built-in-primary-links"
							/>
						))
					}
				</AdminSidebar>
				<button
					id="__clubs:sidebar-close__"
					class="text-dp-white-ink fixed left-1/2 bottom-[3rem] flex aspect-square w-14 -translate-x-1/2 items-center justify-center rounded-full bg-white shadow-2xl lg:hidden"
					><XMark />
				</button>
			</header>
			<main class="container mx-auto px-2 py-8 lg:px-0 lg:py-16">
				<div class="break-words">
					{
						theme ? (
							<div class="grid gap-16">
								<section class="grid gap-16">
									<h2 class="font-title text-2xl font-bold">Theme</h2>
									<AdminThemeCard meta={currentTheme?.meta} />
								</section>
								<h2 class="font-title text-2xl font-bold">
									Theme Configuration
								</h2>
								<slot />
							</div>
						) : (
							<slot />
						)
					}
				</div>
			</main>
			<div class="container mx-auto px-2 py-8 lg:px-0 lg:py-16">
				<Aside config={config} showConnectButton={true}>
					<slot name="admin:aside:after-built-in-buttons" />
					{
						SlotsAsideAfterBuiltInButtons.map((Slot) => (
							<Slot.component {...Slot.props} />
						))
					}
				</Aside>
			</div>

			<!-- Navigation bar for mobile -->
			<div
				id="__clubs:nav-mobile__"
				class="fixed bottom-[3rem] left-1/2 flex -translate-x-1/2 items-stretch gap-6 transition-all duration-300 ease-in-out lg:hidden"
			>
				<div
					class="text-dp-white-ink flex items-stretch gap-2 rounded-full bg-white py-4 px-6 shadow-2xl"
				>
					<Clubs />
				</div>
				<button
					id="__clubs:sidebar-open__"
					class="text-dp-white-ink flex aspect-square w-14 items-center justify-center rounded-full bg-white shadow-2xl"
					><Bars3BottomLeft />
				</button>
			</div>
			<AdminConfigurationManager {clubs} />
		</div>
		<Modal {...Astro.props} />
	</body>

	<script>
		const header = document.getElementById('__clubs:header__')!
		const navMobile = document.getElementById('__clubs:nav-mobile__')!
		document
			.getElementById('__clubs:sidebar-open__')
			?.addEventListener('click', () => {
				header.classList.toggle('hidden')
			})

		document
			.getElementById('__clubs:sidebar-close__')
			?.addEventListener('click', () => {
				header.classList.toggle('hidden')
			})

		let lastKnownScrollPosition = 0
		let timer: NodeJS.Timeout

		const toggleNavMobile = (scrollPos: number) => {
			const shown = navMobile.classList.contains('nav-mobile--hide') === false
			const update =
				(shown && scrollPos > lastKnownScrollPosition) ||
				(!shown && scrollPos < lastKnownScrollPosition)
			if (update) navMobile.classList.toggle('nav-mobile--hide')
			lastKnownScrollPosition = scrollPos
		}

		const onScroll = () => {
			if (timer) clearTimeout(timer)
			timer = setTimeout(() => toggleNavMobile(window.scrollY), 80)
		}

		const onInit = () => {
			if (window.innerWidth < 1024) {
				document.addEventListener('scroll', onScroll)
			} else {
				document.removeEventListener('scroll', onScroll)
			}
		}

		window.addEventListener('resize', onInit)
		document.addEventListener('DOMContentLoaded', onInit)
	</script>

	<style>
		.nav-mobile--hide {
			bottom: -5rem;
		}
	</style>
</html>
