---
import { ClubsPropsAdminPages, decode } from '../index'
import AdminSidebar from './AdminSidebar.astro'
import Aside from './Aside.vue'

import '../styles/global.scss'

const { clubs } = Astro.props as ClubsPropsAdminPages

const config = decode(clubs.encodedClubsConfiguration)
const { name } = config

const enabledPlugins = clubs.plugins
	.filter((plugin) => plugin.enable === true)
	.filter((plugin) => plugin.name.toUpperCase() !== 'ADMIN')
---

<!DOCTYPE html>
<html class="dark" lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>{name} | Admin</title>
	</head>

	<body class="font-body bg-[#222B3D] text-white min-h-screen">
		<div
			class="grid grid-flow-col auto-cols-[18rem_minmax(auto,_1fr)_12rem] gap-20 mr-20"
		>
			<header
				class="bg-[#111827] grid gap-16 content-start py-16 px-8 min-h-screen"
			>
				<AdminSidebar name={name} enabledPlugins={enabledPlugins} />
			</header>
			<main class="container mx-auto py-16">
				<div class="break-words">
					<slot />
				</div>
			</main>
			<div class="py-16">
				<Aside config={config} client:only />
			</div>
			<input
				type="hidden"
				id="_encoded_clubs_configuration_"
				value={clubs.encodedClubsConfiguration}
			/>
			<script>
				import { decode, encode } from '../index'
				import { submitConfig } from '../events'
				import type {
					ClubsConfiguration,
					ClubsEventsUpdatePluginOptions,
					ClubsEventsUpdateConfiguration,
				} from '../types'
				import { ClubsEvents } from '../types'
				import { updatePluginOptionsEventListener } from '../fixtures/utils'

				let currentConfig: ClubsConfiguration = decode(
					(
						document.getElementById(
							'_encoded_clubs_configuration_'
						) as HTMLInputElement
					).value
				)

				document.body.addEventListener(
					ClubsEvents.UpdatePluginOptions,
					async (ev) => {
						ev.preventDefault()
						const {
							detail: { data, pluginIndex },
						} = ev as ClubsEventsUpdatePluginOptions

						console.log('Received event', ClubsEvents.UpdatePluginOptions, {
							data,
							pluginIndex,
						})

						const updatedConfig = await updatePluginOptionsEventListener(
							{ data, pluginIndex },
							currentConfig
						)

						currentConfig = updatedConfig

						console.log(
							'Updated ClubsConfiguration',
							ClubsEvents.UpdatePluginOptions,
							currentConfig
						)
					}
				)

				document.body.addEventListener(
					ClubsEvents.UpdateConfiguration,
					(ev) => {
						ev.preventDefault()
						const {
							detail: { data },
						} = ev as ClubsEventsUpdateConfiguration

						console.log('Received event', ClubsEvents.UpdateConfiguration, {
							data,
						})

						currentConfig = data

						console.log(
							'Updated ClubsConfiguration',
							ClubsEvents.UpdateConfiguration,
							currentConfig
						)
					}
				)

				document.body.addEventListener(ClubsEvents.BuildConfiguration, (ev) => {
					ev.preventDefault()

					console.log('Received event', ClubsEvents.BuildConfiguration)

					const encodedConfig = encode(currentConfig)

					console.log('New configuration', encodedConfig)

					submitConfig(encodedConfig)
				})
			</script>
		</div>
	</body>
</html>
