---
import { ClubsPropsAdminPages, decode } from '../index'

const { clubs } = Astro.props as ClubsPropsAdminPages

const { name, plugins } = decode(clubs.encodedClubsConfiguration)
const enabledPlugins = plugins
	.filter((plugin) => plugin.enable === true)
	.filter((plugin) => plugin.name.toUpperCase() !== 'ADMIN')
---

<!DOCTYPE html>
<html class="dark" lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<title>{name} | Admin</title>
	</head>

	<body
		class="font-body bg-[#3A4158] text-white min-h-screen container mx-auto px-4"
	>
		<div class="flex py-8">
			<header class="flex flex-col pr-16">
				<h1 class="font-title text-lg font-bold mb-16">{name}</h1>
				<nav class="flex flex-col">
					<a class="mb-4 text-sm" href="/admin">Admin</a>
					<a class="mb-16 text-sm" href="/admin/plugins">Plugins</a>

					{
						enabledPlugins.map((plugin) => (
							<a class="mb-4 text-sm capitalize" href={plugin.name}>
								{plugin.name}
							</a>
						))
					}
				</nav>
			</header>
			<main class="w-full">
				<slot />
			</main>
			<input
				type="hidden"
				id="_encoded_clubs_configuration_"
				value={clubs.encodedClubsConfiguration}
			/>
			<script>
				import { decode } from '../index'
				import type {
					ClubsConfiguration,
					ClubsEventsUpdatePluginOptions,
					ClubsEventsUpdateConfiguration,
				} from '../types'
				import { ClubsEvents } from '../types'

				let currentConfig: ClubsConfiguration = decode(
					(
						document.getElementById(
							'_encoded_clubs_configuration_'
						) as HTMLInputElement
					).value
				)

				document.body.addEventListener(
					ClubsEvents.UpdatePluginOptions,
					(ev) => {
						ev.preventDefault()
						const {
							detail: { data, pluginIndex },
						} = ev as ClubsEventsUpdatePluginOptions

						console.log('Received event', ClubsEvents.UpdatePluginOptions, {
							data,
							pluginIndex,
						})

						const updatedPlugins = [...currentConfig.plugins].map((mplg, i) =>
							i === pluginIndex ? { ...mplg, options: data } : mplg
						)
						const updatedConfig = { ...currentConfig, plugins: updatedPlugins }
						currentConfig = updatedConfig

						console.log(
							'Updated ClubsConfiguration',
							ClubsEvents.UpdatePluginOptions,
							currentConfig
						)
					}
				)

				document.body.addEventListener(
					ClubsEvents.UpdateConfiguration,
					(ev) => {
						ev.preventDefault()
						const {
							detail: { data },
						} = ev as ClubsEventsUpdateConfiguration

						console.log('Received event', ClubsEvents.UpdateConfiguration, {
							data,
						})

						currentConfig = data

						console.log(
							'Updated ClubsConfiguration',
							ClubsEvents.UpdateConfiguration,
							currentConfig
						)
					}
				)
			</script>
		</div>
	</body>
</html>
